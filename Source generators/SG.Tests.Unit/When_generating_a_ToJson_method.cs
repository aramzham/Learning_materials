using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using SG.Generator;

namespace SG.Tests.Unit;

public class When_generating_a_ToJson_method
{
    private const string expectedOutput = """
                                          //---------------------------------------------------
                                          // <auto-generated>
                                          //    This code was generated by ToJsonGenerator at 2025-10-15T08:50:55.
                                          // </auto-generated>
                                          //---------------------------------------------------
                                              
                                              using System.Text;
                                              
                                              namespace SG.Domain.Entities
                                              {
                                                  internal partial class Address
                                                  {
                                                      public string ToJson()
                                                      {
                                                          var builder = new StringBuilder();
                                                          
                                                          builder.AppendLine("{");
                                                          builder.AppendLine($"\t\"AddressLine1\": \"{AddressLine1}\",");
                                          builder.AppendLine($"\t\"AddressLine2\": \"{AddressLine2}\",");
                                          builder.AppendLine($"\t\"City\": \"{City}\",");
                                          builder.AppendLine($"\t\"State\": \"{State}\",");
                                          builder.AppendLine($"\t\"PostalCode\": \"{PostalCode}\"");
                                                          builder.AppendLine("}");
                                                          
                                                          return builder.ToString();
                                                      }
                                                  }
                                              }
                                          """;
    
    [Fact]
    public async Task Then_the_expected_output_is_generated()
    {
        var generator = new ToJsonGenerator();
        var input = GetResourceAsString("Address.cs");
        var syntaxTree = CSharpSyntaxTree.ParseText(input);
        var compilation = CSharpCompilation.Create(nameof(Then_the_expected_output_is_generated), [syntaxTree], [MetadataReference.CreateFromFile(typeof(object).Assembly.Location)]);
        var driver = CSharpGeneratorDriver.Create(generator).RunGenerators(compilation);

        var result = driver.GetRunResult();

        var output = result.GeneratedTrees.Single(t => t.FilePath.EndsWith("Address.g.cs")).ToString();
        var actual = output[output.IndexOf("using", StringComparison.Ordinal)..];

        var settings = new VerifySettings();
        settings.ScrubLinesContaining("This code was generated by ToJsonGenerator");
        settings.UseDirectory("Snapshots");
        
        await Verify(actual, settings);
    }

    private string GetResourceAsString(string resourceName)
    {
        var assembly = typeof(When_generating_a_ToJson_method).Assembly;
        var manifestResourceNames = assembly.GetManifestResourceNames();
        var resource = manifestResourceNames.Single(r => r.Equals($"SG.Tests.Unit.{resourceName}"));
        
        using var stream = assembly.GetManifestResourceStream(resource);
        using var reader = new StreamReader(stream!);
        return reader.ReadToEnd();
    }
}